
using System;
using System.Data.SqlClient;

namespace P1InitialSetup
{
    public class StartUp
    {
        private static string connectionString =
            "Server=DESKTOP-SRL2A15\\SQLEXPRESS;"+
            "Database=master;"+
            "Integrated Security = true;";

        public static void Main(string[] args)
        {
            SqlConnection connection = new SqlConnection(connectionString);

            connection.Open();

            using (connection)
            {
                string queryText = "CREATE DATABASE MinionsDB";
                SqlCommand createDbCommand =new SqlCommand(queryText,connection);

                createDbCommand.ExecuteNonQuery();

                Console.WriteLine("Datebase creted successfyl!");

            }



            var connectionStringMinionsDB= "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
                                    "Database=MinionsDB;" +
                                    "Integrated Security = true;";

            SqlConnection connectionMinionsDB = new SqlConnection(connectionStringMinionsDB);

            connectionMinionsDB.Open();
           
           using (connectionMinionsDB)
           {
                string queryText = @"CREATE TABLE Countries (Id INT PRIMARY KEY IDENTITY,Name VARCHAR(50))

                CREATE TABLE Towns(Id INT PRIMARY KEY IDENTITY, Name VARCHAR(50), CountryCode INT FOREIGN KEY REFERENCES Countries(Id))

                CREATE TABLE Minions(Id INT PRIMARY KEY IDENTITY, Name VARCHAR(30), Age INT, TownId INT FOREIGN KEY REFERENCES Towns(Id))

                CREATE TABLE EvilnessFactors(Id INT PRIMARY KEY IDENTITY, Name VARCHAR(50))
                
                CREATE TABLE Villains(Id INT PRIMARY KEY IDENTITY, Name VARCHAR(50), EvilnessFactorId INT FOREIGN KEY REFERENCES EvilnessFactors(Id))
                
                CREATE TABLE MinionsVillains(MinionId INT FOREIGN KEY REFERENCES Minions(Id), VillainId INT FOREIGN KEY REFERENCES Villains(Id), CONSTRAINT PK_MinionsVillains PRIMARY KEY(MinionId, VillainId));
                
                INSERT INTO Countries([Name]) VALUES('Bulgaria'),('England'),('Cyprus'),('Germany'),('Norway')
                
                INSERT INTO Towns([Name], CountryCode) VALUES('Plovdiv', 1),('Varna', 1),('Burgas', 1),('Sofia', 1),('London', 2),('Southampton', 2),('Bath', 2),('Liverpool', 2),('Berlin', 3),('Frankfurt', 3),('Oslo', 4)
                
                INSERT INTO Minions(Name, Age, TownId) VALUES('Bob', 42, 3),('Kevin', 1, 1),('Bob ', 32, 6),('Simon', 45, 3),('Cathleen', 11, 2),('Carry ', 50, 10),('Becky', 125, 5),('Mars', 21, 1),('Misho', 5, 10),('Zoe', 125, 5),('Json', 21, 1)
                
                INSERT INTO EvilnessFactors(Name) VALUES('Super good'),('Good'),('Bad'), ('Evil'),('Super evil')
                
                INSERT INTO Villains(Name, EvilnessFactorId) VALUES('Gru', 2),('Victor', 1),('Jilly', 3),('Miro', 4),('Rosen', 5),('Dimityr', 1),('Dobromir', 2)
                
                INSERT INTO MinionsVillains(MinionId, VillainId) VALUES(4, 2),(1, 1),(5, 7),(3, 5),(2, 6),(11, 5),(8, 4),(9, 7),(7, 1),(1, 3),(7, 3),(5, 3),(4, 3),(1, 2),(2, 1),(2, 7)";

                SqlCommand makeAndInsertCommand = new SqlCommand(queryText, connectionMinionsDB);

                makeAndInsertCommand.ExecuteNonQuery();

                Console.WriteLine("Datebase is made and fill successfyl!");

            }
        }
    }
}

using System;
using System.Data.SqlClient;

namespace P2_Villain_Names
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            var connectionString = "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
                                     "Database=MinionsDB;" +
                                     "Integrated Security = true;";

            SqlConnection connectionMinionsDB = new SqlConnection(connectionString);

            connectionMinionsDB.Open();

            using (connectionMinionsDB)
            {
                
                string queryText = 
                    @"SELECT v.Name, COUNT(mv.VillainId) AS MinionsCount  
                    FROM Villains AS v 
                    JOIN MinionsVillains AS mv ON v.Id = mv.VillainId 
                    GROUP BY v.Id, v.Name 
                    HAVING COUNT(mv.VillainId) > 3 
                    ORDER BY COUNT(mv.VillainId) DESC";

                SqlCommand cmd = new SqlCommand(queryText, connectionMinionsDB);

                SqlDataReader reader=cmd.ExecuteReader();

                using (reader)
                {
                    while(reader.Read())
                    {
                        Console.WriteLine($"{reader["Name"]} - {reader["MinionsCount"]}");
                    }
                }                   
                
            }


        }
    }
}


using System;
using System.Data.SqlClient;

namespace P3._Minion_Names
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            bool villianExist = false;
            int id = int.Parse(Console.ReadLine());

            var connectionString = "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
                                      "Database=MinionsDB;" +
                                      "Integrated Security = true;";

            SqlConnection connectionMinionsDB = new SqlConnection(connectionString);

            connectionMinionsDB.Open();

            using (connectionMinionsDB)
            {
                string queryText =
                    @$"SELECT Name 
                        FROM Villains 
                        WHERE Id = {id}";

                SqlCommand cmd = new SqlCommand(queryText, connectionMinionsDB);

                SqlDataReader reader = cmd.ExecuteReader();

                using (reader)
                {
                    if (reader.Read())
                    {
                        Console.WriteLine($"Villain: {reader["Name"]}");
                        villianExist = true;
                    }
                    else
                    {
                        Console.WriteLine($"No villain with {id} exists in the database.");                        
                    }

                }

                if (villianExist)
                {
                    string queryText2 =
                        @$"SELECT ROW_NUMBER() OVER (ORDER BY m.Name) as RowNum,
                                        m.Name, 
                                        m.Age
                                   FROM MinionsVillains AS mv
                                   JOIN Minions As m ON mv.MinionId = m.Id
                                  WHERE mv.VillainId = {id}
                               ORDER BY m.Name";

                    SqlCommand cmd2 = new SqlCommand(queryText2, connectionMinionsDB);

                    SqlDataReader reader2 = cmd2.ExecuteReader();

                    using (reader2)
                    {
                        if ((reader2.Read().ToString()).Length != 0)
                        {
                            while (reader2.Read())
                            {
                                Console.WriteLine($"{reader2["RowNum"]} {reader2["Name"]} {reader2["Age"]}");
                            }
                        }
                        else
                        {
                            Console.WriteLine("(no minions)");
                        }
                    }
                }
            }
        }
    }
}


using System;
using System.Data.SqlClient;
using System.Linq;

namespace P4._Add_Minion
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            var minionData = Console.ReadLine()
                .Split()
                .ToArray();

            string minionName = minionData[1];
            int minionAge = int.Parse(minionData[2]);
            string minionTown = minionData[3];
            int idTowns = -1;


            var connectionString = "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
                                      "Database=MinionsDB;" +
                                      "Integrated Security = true;";

            SqlConnection connectionMinionsDB = new SqlConnection(connectionString);

            connectionMinionsDB.Open();

            using (connectionMinionsDB)
            {
                string queryText =
                    @$"SELECT Id FROM Towns WHERE Name = {minionTown}";

                SqlCommand cmd = new SqlCommand(queryText, connectionMinionsDB);

                //have, not have a town
                SqlDataReader reader = cmd.ExecuteReader();
                using (reader)
                {
                    if (reader.Read())
                    {
                        idTowns = (int)(reader["Id"]);
                    }
                    else
                    {
                        string queryAddTown = @"INSERT INTO Towns(Name) VALUES minionTown";
                        SqlCommand cmdAddTown = new SqlCommand(queryAddTown, connectionMinionsDB);

                        cmd.ExecuteNonQuery();

                        Console.WriteLine( "Town <TownName> was added to the database.");
                    }
                }
            }
        }
    }
}


using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace P5_Change_Town_Names_Casing
{
    public class StartUp
    {
        private static string connectionString =
           "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
           "Database=MinionsDB;" +
           "Integrated Security = true;";

        private static SqlConnection connection = new SqlConnection(connectionString);
       
        public static void Main(string[] args)
        {
            string countryName = Console.ReadLine();

            List<string> townNames = new List<string>();


            using (connection)
            {
                connection.Open();
                string changeToUpper = @"UPDATE Towns
                                         SET Name = UPPER(Name)
                                         WHERE CountryCode = (SELECT c.Id FROM Countries AS c WHERE c.Name = @countryName)";
                using (SqlCommand command = new SqlCommand(changeToUpper, connection))
                {
                    command.Parameters.AddWithValue("@countryName", countryName);
                    command.ExecuteNonQuery();
                }

                string getAffectedNames = @"SELECT t.Name 
                                            FROM Towns as t
                                            JOIN Countries AS c ON c.Id = t.CountryCode
                                            WHERE c.Name = @countryName";

                using (SqlCommand command = new SqlCommand(getAffectedNames, connection))
                {
                    command.Parameters.AddWithValue("@countryName", countryName);
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            townNames.Add(reader["Name"].ToString());
                        }
                    }
                }
            }

            if (townNames.Count == 0)
            {
                Console.WriteLine("No town names were affected.");
            }
            else
            {
                Console.WriteLine($"{townNames.Count} town names were affected.");
                Console.WriteLine("[{0}]", string.Join(", ", townNames));
            }

        }
    }
}

using System;
using System.Data.SqlClient;

namespace P6._Remove_Villain
{
    public class StartUp
    {
        private static string connectionString = 
            "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
            "Database=MinionsDB;" +
            "Integrated Security = true;";

        private static SqlConnection connection = new SqlConnection(connectionString);
        private static SqlTransaction transaction;

        public static void Main(string[] args)
        {

            int id = int.Parse(Console.ReadLine());

            connection.Open();
            using (connection)
            {
                transaction = connection.BeginTransaction();

                try
                {
                    SqlCommand command = new SqlCommand();
                    command.Connection = connection;
                    command.Transaction = transaction;
                    command.CommandText = "SELECT Name FROM Villains WHERE Id = @villainId";
                    command.Parameters.AddWithValue("@villainId",id);

                    object value = command.ExecuteScalar();

                    if(value == null)
                    {
                        throw new ArgumentException("No such villain was found.");
                    }

                    string villianName = (string)value;

                    command.CommandText = 
                        @"DELETE FROM MinionsVillains 
                          WHERE VillainId = @villainId";

                    int minionsDeleted = command.ExecuteNonQuery();
                    command.CommandText = 
                        @"DELETE FROM Villains
                          WHERE Id = @villainId";
                    command.ExecuteNonQuery();

                    transaction.Commit();
                    Console.WriteLine($"{villianName} was deleted.");
                    Console.WriteLine($"{minionsDeleted} minions were released.");
                    
                }               
                catch(ArgumentException ane)
                {
                    try
                    {
                        Console.WriteLine(ane.Message);
                        transaction.Rollback();
                    }

                    catch(Exception e)
                    {
                        try
                        {
                            Console.WriteLine(e.Message);
                            transaction.Rollback();
                        }
                        catch(Exception re)
                        {
                            Console.WriteLine(re.Message);
                        }
                    }
                }
            }
        }
    }
}


using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace P7__Print_All_Minion_Names
{
    public class StartUp
    {
        private static string connectionString =
           "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
           "Database=MinionsDB;" +
           "Integrated Security = true;";

        private static SqlConnection connection = new SqlConnection(connectionString);

        public static void Main(string[] args)
        {
            List<string> names = new List<string>();

            using (connection)
            {
                connection.Open();
                string minionNames = @"SELECT Name FROM Minions";

                using (SqlCommand command = new SqlCommand(minionNames, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            names.Add(reader["Name"].ToString());
                        }
                    }
                }
            }

            int last = names.Count - 1;
            for (int i = 0; i < names.Count / 2; i++)
            {
                Console.WriteLine(names[i]);
                Console.WriteLine(names[last - i]);
            }
            if (names.Count % 2 == 1)
            {
                Console.WriteLine(names[names.Count / 2]);
            }

        }
    }
}

using System;
using System.Data.SqlClient;
using System.Linq;

namespace P8_Increase_Minion_Age
{
    public class StartUp
    {
        private static string connectionString =
          "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
          "Database=MinionsDB;" +
          "Integrated Security = true;";

        private static SqlConnection connection = new SqlConnection(connectionString);

        public static void Main(string[] args)
        {
            int[] ids = Console.ReadLine().Split().Select(int.Parse).ToArray();

            using (connection)
            {
                connection.Open();

                string statement = @"UPDATE Minions
                                        SET Name = UPPER(LEFT(Name, 1)) + SUBSTRING(Name, 2, LEN(Name)), Age += 1
                                     WHERE Id = @Id";
                foreach (var id in ids)
                {
                    using (SqlCommand command = new SqlCommand(statement, connection))
                    {
                        command.Parameters.AddWithValue("@Id", id);
                        command.ExecuteNonQuery();
                    }
                }

                string selectStatement = @"SELECT Name, Age FROM Minions";

                using (SqlCommand command = new SqlCommand(selectStatement, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            Console.WriteLine($"{reader["Name"].ToString()} {(int)reader["Age"]}");
                        }
                    }
                }
            }
        }
    }
}

using System;
using System.Data.SqlClient;

namespace P9_Increase_Age_Stored_Procedure
{
    public class StartUp
    {
        private static string connectionString =
            "Server=DESKTOP-SRL2A15\\SQLEXPRESS;" +
            "Database=MinionsDB;" +
            "Integrated Security = true;";

        private static SqlConnection connection = new SqlConnection(connectionString);

        public static void Main(string[] args)
        {
            int minionId = int.Parse(Console.ReadLine());

            using (connection)
            {
                connection.Open();

                string statement = @"EXEC usp_GetOlder @id";
                using (SqlCommand command = new SqlCommand(statement, connection))
                {
                    command.Parameters.AddWithValue("@Id", minionId);
                    command.ExecuteNonQuery();
                }

                string selectStatement = @"SELECT Name, Age FROM Minions WHERE Id = @Id";

                using (SqlCommand command = new SqlCommand(selectStatement, connection))
                {
                    command.Parameters.AddWithValue("@Id", minionId);
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            Console.WriteLine($"{reader["Name"].ToString()} {(int)reader["Age"]}");
                        }
                    }
                }
            }
        }
    }
}

