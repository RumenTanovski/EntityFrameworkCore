using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using AutoMapper;
using CarDealer.Data;
using CarDealer.DTO;
using CarDealer.Models;
using Newtonsoft.Json;

namespace CarDealer
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            //syzdava bazata na SQL Server
            //using (var db= new CarDealerContext())
            //{   
            // db.Database.EnsureDeleted();
            // db.Database.EnsureCreated();
            //}

            //Mapper.Initialize(cfg =>
            //                  cfg.AddProfile<CarDealerProfile>());
            // Deserialize, Serialize
            using (var db = new CarDealerContext())
            {
                //var inputJson = File.ReadAllText("./../../../Datasets/suppliers.json");
                //var inputJson = File.ReadAllText("./../../../Datasets/parts.json");
                var inputJson = File.ReadAllText("./../../../Datasets/cars.json");
                //var inputJson = File.ReadAllText("./../../../Datasets/customers.json");
                //var inputJson = File.ReadAllText("./../../../Datasets/sales.json");


                //var result = ImportSuppliers(db, inputJson);
                var result = ImportCars(db, inputJson);
                //var result = ImportSales(db, inputJson);
                //var result = ImportSales(db, inputJson);

                //var result = GetOrderedCustomers(db);
                //var result = GetCarsFromMakeToyota(db);
                //var result = GetLocalSuppliers(db);
                //var result = GetCarsWithTheirListOfParts(db);
                //var result = GetTotalSalesByCustomer(db);
                //var result = GetSalesWithAppliedDiscount(db);

                Console.WriteLine(result);
            }
        }

        //    1. Import data
        //    Query 9. Import Suppliers
        public static string ImportSuppliers(CarDealerContext context, string inputJson)
        {
            var suppliers = JsonConvert.DeserializeObject<Supplier[]>(inputJson);

            context.AddRange(suppliers);
            context.SaveChanges();

            return $"Successfully imported {suppliers.Count()}.";
        }

        //    Query 10. Import Parts
        public static string ImportParts(CarDealerContext context, string inputJson)
        {
            var parts = JsonConvert.DeserializeObject<List<Part>>(inputJson)
                    .OrderBy(x => x.SupplierId)
                    .ToList();

            var suppliers = context.Suppliers
                .Select(s => s.Id)
                .ToList();

            parts = parts
                .Where(p => suppliers.Contains(p.SupplierId))
                .ToList();

            context.AddRange(parts);
            context.SaveChanges();

            return $"Successfully imported {parts.Count()}.";
        }

        //Query 11. Import Cars samo 50 ot 100, trebe remont.
        public static string ImportCars(CarDealerContext context, string inputJson)
        {
            var json = JsonConvert.DeserializeObject<ImportCarDto[]>(inputJson);

            foreach (var carDto in json)
            {
                Car car = new Car
                {
                    Make = carDto.Make,
                    Model = carDto.Model,
                    TravelledDistance = carDto.TravelledDistance
                };
            
                context.Cars.Add(car);
            
                foreach (var partId in carDto.PartsId.Distinct())
                {
                    PartCar partCar = new PartCar
                    {
                        CarId = car.Id,
                        PartId = partId
                    };
            
                    if (car.PartCars.FirstOrDefault(p => p.PartId == partId) == null)
                    {
                      context.PartCars.Add(partCar);
                    }
                }
            }


            //50 ot 100
            //var cars = JsonConvert.DeserializeObject<List<Car>>(inputJson)
            //    .OrderBy(x => x.Id)
            //    .ToList();
            //
                       
            int count = context.SaveChanges();

            return $"Successfully imported {count}.";
        }


        //Query 12. Import Customers
        public static string ImportCustomers(CarDealerContext context, string inputJson)
        {
            var json = JsonConvert.DeserializeObject<Customer[]>(inputJson);

            context.Customers.AddRange(json);
            int count = context.SaveChanges();

            return $"Successfully imported {count}.";
        }

        //Query 13. Import Sales
        public static string ImportSales(CarDealerContext context, string inputJson)
        {
            var json = JsonConvert.DeserializeObject<Sale[]>(inputJson);

            context.Sales.AddRange(json);
            int count = context.SaveChanges();

            return $"Successfully imported {count}.";
        }

        //    4. Query and Export Data
        //    Query 14. Export Ordered Customers
        public static string GetOrderedCustomers(CarDealerContext context)
        {
            var customers = context.Customers
                .OrderBy(c => c.BirthDate)
                .ThenBy(c => c.IsYoungDriver)
                .Select(c => new    //ExportCustomerDto - ako she e s DTO
                {
                    Name = $"{c.Name}",
                    BirthDate = c.BirthDate.ToString("dd/MM/yyyy"),
                    c.IsYoungDriver
                })
                .ToList();

            var json = JsonConvert.SerializeObject(customers, Formatting.Indented);

            return json;
        }

        //Query 15. Export Cars from make Toyota
        public static string GetCarsFromMakeToyota(CarDealerContext context)
        {
            var toyotas = context
                .Cars
                .Where(c => c.Make == "Toyota")
                .OrderBy(c => c.Model)
                .ThenByDescending(c => c.TravelledDistance)
                .Select(c => new
                {
                    c.Id,
                    c.Make,
                    c.Model,
                    c.TravelledDistance
                });

            var json = JsonConvert.SerializeObject(toyotas, Formatting.Indented);

            return json;
        }

        //Query 16. Export Local Suppliers
        public static string GetLocalSuppliers(CarDealerContext context)
        {
            var suppliers = context
                .Suppliers
                .Where(s => s.IsImporter == false)
                .Select(s => new
                {
                    s.Id,
                    s.Name,
                    PartsCount = s.Parts.Count
                })
                .ToList();
            var json = JsonConvert.SerializeObject(suppliers, Formatting.Indented);

            return json;
        }

        //Query 17. Export Cars with Their List of Parts
        public static string GetCarsWithTheirListOfParts(CarDealerContext context)
        {
            var cars = context
                .Cars
                .Select(c => new
                {
                    car = new
                    {
                        c.Make,
                        c.Model,
                        c.TravelledDistance
                    },
                    parts = c.PartCars
                        .Select(p => new
                        {
                            p.Part.Name,
                            Price = $"{ p.Part.Price:f2}"
                        })
                })
                .ToList();

            var json = JsonConvert.SerializeObject(cars, Formatting.Indented);

            return json;
            //II nachin s DTO edno za kolite i edno za chastite 
            // ,kato sled new se posochvat
            // namespace CarDealer.DTO.Export
            // {
            //  using Newtonsoft.Json;
            //
            //     public class ExportPartDto
            //     {
            //     [JsonProperty("Name")]
            //     public string Name { get; set; }
            //
            //     [JsonProperty("Price")]
            //     public string Price { get; set; }
            // }
        }

        //    Query 18. Export Total Sales by Customer
        public static string GetTotalSalesByCustomer(CarDealerContext context)
        {
            var sales = context.Customers
                .Where(c => c.Sales.Count() >= 1)
                .Select(c => new
                {
                    fullName = c.Name,
                    boughtCars = c.Sales.Count(),
                    spentMoney = c.Sales.Sum(s => s.Car.PartCars.Sum(p => p.Part.Price))
                })
                .OrderByDescending(m => m.spentMoney)
                .ThenByDescending(c => c.boughtCars)
                .ToList();
            
            var json = JsonConvert.SerializeObject(sales, Formatting.Indented);
            return json;
        }

        //Query 19. Export Sales with Applied Discount
        public static string GetSalesWithAppliedDiscount(CarDealerContext context)
        {
            var sales = context.Sales
                .Take(10)
                .Select(s => new
                {
                    car = new
                    {
                        s.Car.Make,
                        s.Car.Model,
                        s.Car.TravelledDistance
                    },
                    customerName = s.Customer.Name,
                    Discount = $"{ s.Discount:f2}",
                    price = $"{s.Car.PartCars.Sum(p => p.Part.Price):F2}",
                    priceWithDiscount = $@"{(s.Car.PartCars.Sum(p => p.Part.Price) -
                        s.Car.PartCars.Sum(p => p.Part.Price) * s.Discount / 100):F2}"
                })
                .ToList();

            var json = JsonConvert.SerializeObject(sales, Formatting.Indented);
            return json;
        }
    }
}

using System.Collections.Generic;

namespace CarDealer.DTO
{
    public class ImportCarDto
    {
        public string Make { get; set; }

        public string Model { get; set; }

        public long TravelledDistance { get; set; }

        public ICollection<int> PartsId { get; set; }
    }
}
