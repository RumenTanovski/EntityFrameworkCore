using System;
using System.IO;
using System.Linq;
using System.Xml.Serialization;
using System.Collections.Generic;

using AutoMapper;
using ProductShop.Data;
using ProductShop.Dtos.Import;
using ProductShop.Models;
using ProductShop.Dtos.Export;
using System.Text;
using System.Xml;

namespace ProductShop
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            // using (var db = new ProductShopContext())
            // {
            //     db.Database.EnsureDeleted();
            //     db.Database.EnsureCreated();
            // }


            Mapper.Initialize(cfg =>
            {
                cfg.AddProfile<ProductShopProfile>();
            });

            using (var db = new ProductShopContext())
            {
                //var inputXml = File.ReadAllText("./../../../Datasets/users.xml");
                //var inputXml = File.ReadAllText("./../../../Datasets/products.xml");
                //var inputXml = File.ReadAllText("./../../../Datasets/categories.xml");
                //var inputXml = File.ReadAllText("./../../../Datasets/categories-products.xml");
                //var result = GetProductsInRange(db);
                //var result = GetSoldProducts(db);
                //var result = GetCategoriesByProductsCount(db);

                var result = GetUsersWithProducts(db);

                Console.WriteLine(result);
            }
        }

        //Query 1. Import Users
        public static string ImportUsers(ProductShopContext context, string inputXml)
        {
            //syzdawane na prazen serializator
            var xmlSerializer =
                new XmlSerializer(typeof(ImportUsersDto[]),
                            new XmlRootAttribute("Users"));

            //popylvane na masiva s vhoda ot stringa(vhoden 
            var usersDto = (ImportUsersDto[])xmlSerializer
                .Deserialize(new StringReader(inputXml));

            //popylvane na masiva za bazata ot Dto
            var users = new List<User>();

            foreach (var userDto in usersDto)
            {
                var user = Mapper.Map<User>(userDto);
                users.Add(user);
            }

            //Zapis v SQL bazata
            context.Users.AddRange(users);
            context.SaveChanges();

            return $"Successfully imported {users.Count()}";
        }

        //Query 2. Import Products
        public static string ImportProducts(ProductShopContext context, string inputXml)
        {
            //syzdawane na prazen serializator
            var xmlSerializer =
                new XmlSerializer(typeof(ImportProductDto[]),
                            new XmlRootAttribute("Products"));

            //popylvane na masiva s vhoda ot stringa(vhoden 
            var productsDto = (ImportProductDto[])xmlSerializer
                                .Deserialize(new StringReader(inputXml));

            //popylvane na masiva za bazata ot Dto
            var products = new List<Product>();

            foreach (var productDto in productsDto)
            {
                var product = Mapper.Map<Product>(productDto);
                products.Add(product);
            }

            //Zapis v SQL bazata
            context.Products.AddRange(products);
            context.SaveChanges();

            return $"Successfully imported {products.Count()}";
        }

        //Query 3. Import Categories
        public static string ImportCategories(ProductShopContext context, string inputXml)
        {
            //syzdawane na prazen serializator
            var xmlSerializer =
                new XmlSerializer(typeof(ImportCategoryDto[]),
                            new XmlRootAttribute("Categories"));

            //popylvane na masiva s vhoda ot stringa(vhoden 
            var categoriesDto = (ImportCategoryDto[])xmlSerializer
                                .Deserialize(new StringReader(inputXml));

            //popylvane na masiva za bazata ot Dto
            var categories = new List<Category>();

            foreach (var categoryDto in categoriesDto)
            {
                if (categoryDto != null)
                {
                    var category = Mapper.Map<Category>(categoryDto);
                    categories.Add(category);
                }
            }

            //Zapis v SQL bazata
            context.Categories.AddRange(categories);
            context.SaveChanges();

            return $"Successfully imported {categories.Count()}";
        }

        //Query 4. Import Categories and Products
        public static string ImportCategoryProducts(ProductShopContext context, string inputXml)
        {
            var xmlSerializer = new XmlSerializer(typeof(ImportCategoryProductDto[]),
                new XmlRootAttribute("CategoryProducts"));

            var categoryProductsDto = (ImportCategoryProductDto[])xmlSerializer
                .Deserialize(new StringReader(inputXml));

            var categoryProducts = new List<CategoryProduct>();
            var categories = context.Categories.ToList();
            var products = context.Products.ToList();

            foreach (var catProdDto in categoryProductsDto)
            {
                if (categories.Any(x => x.Id == catProdDto.CategoryId)
                    && products.Any(y => y.Id == catProdDto.ProductId))
                {
                    var catProd = Mapper.Map<CategoryProduct>(catProdDto);

                    categoryProducts.Add(catProd);
                }
            }

            context.CategoryProducts.AddRange(categoryProducts);
            context.SaveChanges();

            return $"Successfully imported {categoryProducts.Count()}";
        }

        //2. Query and Export Data
        //Query 5. Products In Range
        public static string GetProductsInRange(ProductShopContext context)
        {

            var products = context.Products
                .Where(p => p.Price >= 500 && p.Price <= 1000)
                .OrderBy(p => p.Price)
                .Take(10)
                .Select(p => new ExportProductsInRangeDto
                {
                    NameProduct = p.Name,
                    Price = p.Price,
                    BuyerFulltName = p.Buyer.FirstName + " " + p.Buyer.LastName
                })
                .ToArray();


            var xmlSerializer = new XmlSerializer(typeof(ExportProductsInRangeDto[]),
                                new XmlRootAttribute("Products"));

            var sb = new StringBuilder();

            var namespaces = new XmlSerializerNamespaces(new[] {
              XmlQualifiedName.Empty
          });

            xmlSerializer.Serialize(new StringWriter(sb), products, namespaces);
            return sb.ToString();
        }

        // Query 6. Sold Products

        public static string GetSoldProducts(ProductShopContext context)
        {
            var users = context.Users
                .Where(u => u.ProductsSold.Count() >= 1)
                .OrderBy(u => u.LastName)
                .ThenBy(u => u.FirstName)
                .Take(5)
                .Select(u => new ExportSoldProductDto
                {
                    FirstName = u.FirstName,
                    LastName = u.LastName,
                    ProductDtos = u.ProductsSold.Select(p => new ProductDto
                    {
                        Name = p.Name,
                        Price = p.Price
                    }).ToArray()
                })
                .ToArray();

            var xmlSerializer = new XmlSerializer(typeof(ExportSoldProductDto[]),
                              new XmlRootAttribute("Users"));

            var sb = new StringBuilder();

            var namespaces = new XmlSerializerNamespaces(new[]
            {
              XmlQualifiedName.Empty
            });

            xmlSerializer.Serialize(new StringWriter(sb), users, namespaces);
            return sb.ToString();
        }

        // Query 7. Categories By Products Count
        public static string GetCategoriesByProductsCount(ProductShopContext context)
        {
            var categories = context.Categories
                .Select(c => new ExportCategoriesByProductsCountDto
                {
                    Name = c.Name,
                    Count = c.CategoryProducts.Count(),
                    AveragePrice = c.CategoryProducts.Average(cp => cp.Product.Price),
                    TotalRevenue = c.CategoryProducts.Sum(cp => cp.Product.Price)
                })
                .OrderByDescending(c => c.Count)
                .ThenBy(c => c.TotalRevenue)
                .ToArray();

            var xmlSerializer = new XmlSerializer(typeof(ExportCategoriesByProductsCountDto[]),
                              new XmlRootAttribute("Categories"));
            var sb = new StringBuilder();

            var namespaces = new XmlSerializerNamespaces(new[]
            {
              XmlQualifiedName.Empty
            });

            xmlSerializer.Serialize(new StringWriter(sb), categories, namespaces);
            return sb.ToString();
        }

        //Query 8. Users and Products
        public static string GetUsersWithProducts(ProductShopContext context)
        {
            var users = context.Users
                .Where(u => u.ProductsSold.Any())
                .OrderByDescending(p => p.ProductsSold.Count())
                .Select(u => new UsersWithSoldProductsDto
                {
                    FirstName = u.FirstName,
                    LastName = u.LastName,
                    Age = u.Age,
                    SoldProducts = new SoldProductsCountDto
                    {
                        Count = u.ProductsSold.Count(),
                        Products = u.ProductsSold
                        .Select(p => new SoldProductsDto
                        {
                            Name = p.Name,
                            Price = p.Price
                        })
                        .OrderByDescending(p => p.Price)
                        .ToArray()
                    }
                })
                .Take(10)
                .ToArray();

            var result = new UsersAndProductsDto
            {
                Count = context.Users.Count(p => p.ProductsSold.Any()),
                Users = users
            };

            var xmlSerializer = new XmlSerializer(typeof(UsersAndProductsDto), new XmlRootAttribute("Users"));

            var sb = new StringBuilder();
            var namespaces = new XmlSerializerNamespaces(new[] { XmlQualifiedName.Empty });
            xmlSerializer.Serialize(new StringWriter(sb), result, namespaces);

            return sb.ToString().TrimEnd();
        }
    }
}

using AutoMapper;
using ProductShop.Dtos.Import;
using ProductShop.Models;

namespace ProductShop
{
    public class ProductShopProfile : Profile
    {
        public ProductShopProfile()
        {
            this.CreateMap<ImportUsersDto, User>();
            this.CreateMap<ImportProductDto, Product>();
            this.CreateMap<ImportCategoryDto, Category>();
            this.CreateMap<ImportCategoryProductDto, CategoryProduct>();
        }
    }
}

Import

using System.Xml.Serialization;

namespace ProductShop.Dtos.Import
{
    [XmlType("User")]
    public class ImportUsersDto
    {
        [XmlElement("firstName")]
        public string FirstName { get; set; }
        
        [XmlElement("lastName")]
        public string LastName { get; set; }
        
        [XmlElement("age")]
        public int? Age { get; set; }
               
    }
}

using System.Xml.Serialization;

namespace ProductShop.Dtos.Import
{
    [XmlType("Product")]
    public class ImportProductDto
    {
        [XmlElement("name")]
        public string Name { get; set; }

        [XmlElement("price")]
        public decimal Price { get; set; }

        [XmlElement("sellerId")]
        public int SellerId { get; set; }
        
        [XmlElement("buyerId")]
        public int? BuyerId { get; set; }
    }
}

using System.Xml.Serialization;

namespace ProductShop.Dtos.Import
{
   [XmlType("CategoryProduct")]
    public class ImportCategoryProductDto
    {
        [XmlElement(ElementName ="CategoryId")]
        public int CategoryId { get; set; }
       
        [XmlElement(ElementName ="ProductId")]
        public int ProductId { get; set; }        

    }
}

using System.Xml.Serialization;

namespace ProductShop.Dtos.Import
{
    [XmlType("Category")]
    public class ImportCategoryDto
    {
        [XmlElement("name")]
        public string Name { get; set; }
    }
}


Export

using System.Xml.Serialization;

namespace ProductShop.Dtos.Export
{
    [XmlType("Category")]
    public class ExportCategoriesByProductsCountDto
    {
        [XmlElement("name")]
        public string Name { get; set; }

        [XmlElement("count")]
        public int Count { get; set; }

        [XmlElement("averagePrice")]
        public decimal AveragePrice { get; set; }

        [XmlElement("totalRevenue")]
        public decimal TotalRevenue { get; set; }
    }
}

using System.Xml.Serialization;

namespace ProductShop.Dtos.Export
{
    [XmlType("Product")]
    public class ExportProductsInRangeDto
    {
        [XmlElement("name")]
        public string NameProduct { get; set; }

        [XmlElement("price")]
        public decimal Price { get; set; }

        [XmlElement("buyer")]
        public string BuyerFulltName { get; set; }

    }
}

sing System.Xml.Serialization;

namespace ProductShop.Dtos.Export
{
    [XmlType("User")]
    public class ExportSoldProductDto
    {
        [XmlElement("firstName")]
        public string FirstName { get; set; }

        [XmlElement("lastName")]
        public string LastName { get; set; }

        [XmlArray("soldProducts")]        
        public ProductDto[] ProductDtos { get; set; }

    }

    [XmlType("Product")]
    public class ProductDto
    {
        [XmlElement("name")]
        public string Name { get; set; }

        [XmlElement("price")]
        public decimal Price { get; set; }
    }
}

using System.Xml.Serialization;

namespace ProductShop.Dtos.Export
{
    public class UsersAndProductsDto
    {
        [XmlElement(ElementName = "count")]
        public int Count { get; set; }

        [XmlArray(ElementName = "users")]
        public UsersWithSoldProductsDto[] Users { get; set; }
    }
    
    [XmlType("User")]
    public class UsersWithSoldProductsDto
    {
        [XmlElement(ElementName = "firstName")]
        public string FirstName { get; set; }

        [XmlElement(ElementName = "lastName")]
        public string LastName { get; set; }

        [XmlElement(ElementName = "age")]
        public int? Age { get; set; }

        [XmlElement(ElementName = "SoldProducts")]
        public SoldProductsCountDto SoldProducts { get; set; }
    }

    [XmlType("Product")]
    public class SoldProductsDto
    {
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        [XmlElement(ElementName = "price")]
        public decimal Price { get; set; }
    }


    [XmlType("SoldProducts")]
    public class SoldProductsCountDto
    {
        [XmlElement(ElementName = "count")]
        public int Count { get; set; }

        [XmlArray(ElementName = "products")]
        public SoldProductsDto[] Products { get; set; }
    }
}
