namespace BookShop
{
    using BookShop.Models.Enums;
    using Data;
    using Initializer;
    using System;
    using System.Linq;
    using System.Text;

    public class StartUp
    {
        public static void Main()
        {
            using (var db = new BookShopContext())
            {
                //DbInitializer.ResetDatabase(db);
                //int input = int.Parse(Console.ReadLine());

                string result = GetMostRecentBooks(db);
                Console.WriteLine(result);
            }

        }

        public static string GetBooksByAgeRestriction(BookShopContext context, string command)
        {

            var books = context
                .Books
                .Where(b => b.AgeRestriction.ToString().ToLower()
                == command.ToLower())
                .Select(b => new
                {
                    b.Title
                })
                .OrderBy(b => b.Title)
                .ToList();

            StringBuilder sb = new StringBuilder();
            foreach (var b in books)
            {
                sb.AppendLine(b.Title);
            }


            return sb.ToString().TrimEnd();
        }

        public static string GetGoldenBooks(BookShopContext context)
        {
            var books = context
                .Books
                .Where(c => c.EditionType == EditionType.Gold
                            && c.Copies < 5000)
                .Select(b => new
                {
                    b.BookId,
                    b.Title
                })
                .OrderBy(b => b.BookId)
                .ToList();

            StringBuilder sb = new StringBuilder();
            foreach (var b in books)
            {
                sb.AppendLine(b.Title);
            }

            return sb.ToString().TrimEnd();
        }

        public static string GetBooksByPrice(BookShopContext context)
        {
            var books = context
                .Books
                .Where(p => p.Price > 40)
                .OrderByDescending(o => o.Price)
                .Select(b => new
                {
                    b.Title,
                    b.Price
                })
                .ToList();

            return String.Join(Environment.NewLine,
                books.Select(b => $"{b.Title} - ${b.Price:f2}"));
        }

        public static string GetBooksNotReleasedIn(BookShopContext context, int year)
        {
            var books = context.Books
                .Where(p => p.ReleaseDate.Value.Year != year)
                .OrderBy(o => o.BookId)
                .Select(b => new
                {
                    b.Title
                })
                .ToList();

            return String.Join(Environment.NewLine,
                books.Select(b => $"{b.Title}"));
        }

        public static string GetBooksByCategory(BookShopContext context, string input)
        {
            string[] categories = input
                .Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(c => c.ToLower())
                .ToArray();

            var books = context.Books
                .Where(w => w.BookCategories
                           .Any(bc => categories.Contains(bc.Category.Name.ToString().ToLower())))
                .OrderBy(w => w.Title)
                .Select(b => new
                {
                    b.Title
                })
                .ToList();

            StringBuilder sb = new StringBuilder();
            foreach (var b in books)
            {
                sb.AppendLine(b.Title);
            }
            return sb.ToString().TrimEnd();
        }

        public static string GetBooksReleasedBefore(BookShopContext context, string date)
        {
            DateTime releaseDate = DateTime.ParseExact(date, "dd-MM-yyyy", null);

            var books = context.Books
                .Where(b => b.ReleaseDate.Value.Date < releaseDate)
                .OrderByDescending(o => o.ReleaseDate)
                .Select(b => new
                {
                    b.Title,
                    b.EditionType,
                    b.Price
                })
                .ToList();

            StringBuilder sb = new StringBuilder();

            foreach (var b in books)
            {
                sb.AppendLine($"{b.Title} - {b.EditionType} - ${b.Price:f2}");
            }

            return sb.ToString().TrimEnd();
        }

        public static string GetAuthorNamesEndingIn(BookShopContext context, string input)
        {
            var books = context.Authors
                .Where(w => w.FirstName.EndsWith(input))
                .Select(b => new
                {
                    FullName = b.FirstName + " " + b.LastName
                })
                .OrderBy(o => o.FullName)
                .ToList();

            return String.Join(Environment.NewLine,
                books.Select(b => $"{b.FullName}"));

        }
        public static string GetBookTitlesContaining(BookShopContext context, string input)
        {
            var books = context.Books
                .Where(p => p.Title.ToLower().Contains(input.ToLower()))
                .Select(s => new
                {
                    s.Title
                })
                .OrderBy(s => s.Title)
                .ToList();

            return string.Join(Environment.NewLine,
                books.Select(b => $"{b.Title}"));

        }

        public static string GetBooksByAuthor(BookShopContext context, string input)
        {
            var books = context.Books
                .Where(b => b.Author.LastName.ToLower().StartsWith(input.ToLower()))
                .OrderBy(b => b.BookId)
                .Select(b => new
                {
                    b.Title,
                    FullName = b.Author.FirstName + " " + b.Author.LastName
                })
                .ToList();

            StringBuilder sb = new StringBuilder();

            foreach (var b in books)
            {
                sb.AppendLine($"{b.Title} ({b.FullName})");
            }

            return sb.ToString().TrimEnd();
        }

        public static int CountBooks(BookShopContext context, int lengthCheck)
        {
            var booksNum = context.Books
                .Where(b => b.Title.Length > lengthCheck)
                .Select(b => new
                {
                    b.BookId
                })
                .Count();

            return booksNum;
        }

        public static string CountCopiesByAuthor(BookShopContext context)
        {
            var books = context.Authors
                .Select(a => new
                {
                    FullName = a.FirstName + " " + a.LastName,
                    NumberCopy = a.Books.Select(b => b.Copies).Sum()
                })
                .OrderByDescending(a => a.NumberCopy)
                .ToList();

            StringBuilder sb = new StringBuilder();

            foreach (var b in books)
            {
                sb.AppendLine($"{b.FullName} - {b.NumberCopy}");
            }

            return sb.ToString().TrimEnd();
        }

        public static string GetTotalProfitByCategory(BookShopContext context)
        {
            var categories = context.Categories
                .Select(c => new
                {
                    c.Name,
                    Profit = c.CategoryBooks
                        .Select(cb => cb.Book.Price * cb.Book.Copies)
                        .Sum()
                })
                .OrderByDescending(c => c.Profit)
                .ThenBy(c => c.Name)
                .ToList();

            StringBuilder sb = new StringBuilder();
            foreach (var c in categories)
            {
                sb.AppendLine($"{c.Name} ${c.Profit}");
            }

            return sb.ToString().TrimEnd();
        }

        public static string GetMostRecentBooks(BookShopContext context)
        {
            var categories = context.Categories
                .Select(c => new
                {
                    c.Name,
                    Bookss = c.CategoryBooks
                    .Select(cb =>new
                        {   Titlee=cb.Book.Title, 
                            ReleaseDatee=cb.Book.ReleaseDate 
                        })
                    .OrderByDescending(cb => cb.ReleaseDatee)
                    .Take(3)
                    .ToList()
                })
                .OrderBy(c => c.Name)
                .ToList();

            StringBuilder sb = new StringBuilder();
            foreach (var c in categories)
            {
                sb.AppendLine($"--{c.Name}");
                foreach (var b in c.Bookss)
                {
                    sb.AppendLine($"{b.Titlee} ({b.ReleaseDatee.Value.Date.Year})");
                }
            }

            return sb.ToString().TrimEnd();
        }

		public static void IncreasePrices(BookShopContext context)
        {
            int beforeThisYear = 2010;

            context.Books
                .Where(w => w.ReleaseDate.Value.Year < beforeThisYear)
                .ToList()
                .ForEach(b => b.Price += 5);

            context.SaveChanges();
        }

        public static int RemoveBooks(BookShopContext context)
        {
            var booksForDelete = context.Books
                .Where(b => b.Copies < 4200)
                .ToList();

            context.RemoveRange(booksForDelete);

            context.SaveChanges();

            return booksForDelete.Count();
        }

    }
}